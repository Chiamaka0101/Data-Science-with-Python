
1. Importing libraries
import pandas as pd
import numpy as np


2. Creating a DataFrame
python

data = {
    "Name": ["John", "Korede", "Daniel"],
    "Age": [25, 30, 28],
    "City": ["Rivers", "Imo", "Lagos"]
}

df = pd.DataFrame(data)
print(df)



3. Loading datasets
From CSV:

python

df = pd.read_csv("data.csv")


From Excel:

python

df = pd.read_excel("data.xlsx")
From SQL:

python

import sqlite3
conn = sqlite3.connect("mydb.db")
df = pd.read_sql("SELECT * FROM users", conn)


4. Exploring the dataset
python

print(df.head())     # first 5 rows
print(df.tail())     # last 5 rows
print(df.info())     # data types, null values, memory usage
print(df.describe()) # statistics for numeric columns
print(df.shape)      # (rows, columns)
print(df.columns)    # list of column names


5. Selecting and filtering
python

print(df["Name"])          # one column
print(df[["Name", "City"]]) # multiple columns
print(df.iloc[0])          # first row (by index)
print(df.loc[1, "Name"])   # specific value
print(df[df["Age"] > 26])  # filter rows


6. Adding new columns

df["Age Next Year"] = df["Age"] + 1



7. Handling missing data
python

df.dropna()        # remove missing rows
df.fillna(0)       # replace missing values with 0





ðŸ”¢ NumPy (Array-focused)
NumPy is best for numerical computations and working with arrays/matrices.

1. Creating arrays
python

arr = np.array([1, 2, 3, 4, 5])
print(arr)



2. Array operations
python

print(arr + 10)   # add 10 to each element
print(arr * 2)    # multiply each element
print(arr.mean()) # average
print(arr.std())  # standard deviation


3. Multi-dimensional arrays
python

matrix = np.array([[1, 2, 3],
                   [4, 5, 6]])
print(matrix.shape)  # (2, 3)
print(matrix[0, 1])  # element at row 0, column 1 â†’ 2


4. Random data (useful for testing)
python

rand_nums = np.random.rand(5)     # 5 random numbers between 0 and 1
rand_matrix = np.random.randn(3,3) # 3x3 random normal distribution
ðŸ”— Pandas + NumPy Together
They work great together:

python

df["Age_Squared"] = np.square(df["Age"])
print(df)
âœ… In summary:

pandas â†’ best for datasets with rows & columns (tables)

numpy â†’ best for mathematical operations on arrays/matrices.

Matplotlib â†’ data visualization (graphs & plots)


ðŸ“Š Matplotlib Basics

Import
import matplotlib.pyplot as plt

2. Simple Line Plot
x = [1, 2, 3, 4, 5]
y = [2, 4, 6, 8, 10]

plt.plot(x, y, marker='o')
plt.title("Simple Line Plot")
plt.xlabel("X-axis")
plt.ylabel("Y-axis")
plt.show()

3. Bar Chart
python
students = ["John", "Korede", "Daniel"]
scores = [80, 75, 90]

plt.bar(students, scores, color='skyblue')
plt.title("Student Scores")
plt.xlabel("Students")
plt.ylabel("Scores")
plt.show()


4. Histogram (distribution)
python

import numpy as np
data = np.random.randn(1000)  # 1000 random numbers

plt.hist(data, bins=30, color='orange', edgecolor='black')
plt.title("Histogram Example")
plt.show()


5. Scatter Plot
python

x = np.random.rand(50)
y = np.random.rand(50)

plt.scatter(x, y, color='red')
plt.title("Scatter Plot")
plt.show()



ðŸ”— Pandas + Matplotlib
Pandas integrates smoothly with matplotlib.

python

import pandas as pd

data = {
  "Name": ["John", "Korede", "Daniel", "Stephane"],
  "Score": [80, 75, 90, 85]
}

df = pd.DataFrame(data)

df.plot(kind="bar", x="Name", y="Score", color="green", legend=False)
plt.title("Scores by Student")
plt.ylabel("Score")
plt.show()
